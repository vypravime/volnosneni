sugarcube-2:
  macros:
    compLink:
      name: compLink
      container: true
      description: |-
        **Like classic `<<link>>` macro, but INSIDE OUT:**

        `<<link "Anchor text">>`Code to be done after click`<</link>>`
        
        ||

        ```
        <<compLink "CODE TO BE DONE AFTER CLICK">>ANCHOR TEXT<</compLink>>
        ```
        *(useful for highly computed achor texts)*
    dialogCloseButton:
      name: dialogCloseButton
      description: |-
        **Shows button closing dialog window.**
        
        Usage:
        ```
        <<dialogCloseButton "TextOnButton" [omit outer <p>?]>>
        ```
        *(If the second argument /default is FALSE/ is set to TRUE,
          then the enclosing paragraph around the button is ommited.)*
    passageDialog:
      name: passageDialog
      description: |-
        **Opens given Passage in Dialog window.**
        
        Usage:
        ```
        <<passageDialog "Dialog Heading" "passageName">>
        ```
        *(If there was already opened another dialog window,
          it will close it at first
          before opening the new passage dialog window.
          It seems prettier)*
    seeSaw:
      name: seeSaw
      container: true
      description: |-
        **Renders group of cennected state togglable buttons.**

        [Usage:]
        ```
        <<seeSaw true/false "buttons-recognize-css-class"

        `{
          "button1text": ()=> {obj.fireAfterClick(); ...;},
          "button2text": ()=> {obj.fireAfterClick(); ...;},
          "button3text": ()=> {obj.fireAfterClick(); ...;},
          ...
        }`
        `[
          ()=> obj.was1stBtnChosen():boolean,
          ()=> obj.was2ndBtnChosen():boolean,
          ()=> obj.was3rdBtnChosen():boolean
          ]`
        `[obj, 'itsMethodToRegisterThisEventHandler']`
        `[obj, 'itsMethodToTriggerThisEvent']`

        >>general description of buttons<</seeSaw>>
        ```
        [/usage]

        *(if the widget's 1st true/false parameter
          is strictly `TRUE`, then the description
          is rendered before all buttons...
          if the widget's 1st true/false parameter
          is strictly `FALSE`, then the description
          is rendered after all buttons...
          by not strictly boolean value of 1st parameter
          the description is omitted.)*
        
        *(you can use markup in the buttons' texts
          inside the widget's 3rd parameter property names)*
        
        *(inside the widget's 3rd parameter,
          if the given `obj.fireAfterClick()` does not
          trigger customEvent inside its default body,
          you can write it as last step of the wrapping
          anonymous function
          `()=>{step1();step2();...;triggerEvent()}`)*

        *(the widget calls 4th parameter method to register
          its own event handler to get all buttons
          changing their state -color,disabled,etc.-,
          whenewer one of the buttons is clicked)*

        *(the widget calls last -5th- parameter method on
          $(document).ready() to get the right states
          of buttons before any of them is clicked)*
